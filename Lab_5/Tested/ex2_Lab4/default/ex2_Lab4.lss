
ex2_Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000083  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000489  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000124  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003cd  00000000  00000000  000008c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ef  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000089  00000000  00000000  00000dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <usart_init>:
 */ 

#include <avr/io.h>

void usart_init(void){
	UCSRA = 0; //Initialize USCRA as 0
  6c:	1b b8       	out	0x0b, r1	; 11
	// Activate transmitter receiver
	UCSRB = (1 << RXEN) | (1<< TXEN);
  6e:	88 e1       	ldi	r24, 0x18	; 24
  70:	8a b9       	out	0x0a, r24	; 10
	//Baud rate = 9600
	UBRRH = 0;
  72:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
  74:	83 e3       	ldi	r24, 0x33	; 51
  76:	89 b9       	out	0x09, r24	; 9
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
  78:	86 e8       	ldi	r24, 0x86	; 134
  7a:	80 bd       	out	0x20, r24	; 32
}
  7c:	08 95       	ret

0000007e <usart_transmit>:

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <usart_transmit>
	UDR = byte;
  82:	8c b9       	out	0x0c, r24	; 12
}
  84:	08 95       	ret

00000086 <usart_receive>:
unsigned char  usart_receive(void ){
	while(!(UCSRA &(1 << RXC)));
  86:	5f 9b       	sbis	0x0b, 7	; 11
  88:	fe cf       	rjmp	.-4      	; 0x86 <usart_receive>
	return  UDR;
  8a:	8c b1       	in	r24, 0x0c	; 12
}
  8c:	08 95       	ret

0000008e <print_invalid>:
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <print_invalid>
	UDR = byte;
  92:	89 e4       	ldi	r24, 0x49	; 73
  94:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <print_invalid+0x8>
	UDR = byte;
  9a:	8e e6       	ldi	r24, 0x6E	; 110
  9c:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <print_invalid+0x10>
	UDR = byte;
  a2:	86 e7       	ldi	r24, 0x76	; 118
  a4:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <print_invalid+0x18>
	UDR = byte;
  aa:	81 e6       	ldi	r24, 0x61	; 97
  ac:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <print_invalid+0x20>
	UDR = byte;
  b2:	8c e6       	ldi	r24, 0x6C	; 108
  b4:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <print_invalid+0x28>
	UDR = byte;
  ba:	89 e6       	ldi	r24, 0x69	; 105
  bc:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <print_invalid+0x30>
	UDR = byte;
  c2:	84 e6       	ldi	r24, 0x64	; 100
  c4:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  c6:	5d 9b       	sbis	0x0b, 5	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <print_invalid+0x38>
	UDR = byte;
  ca:	80 e2       	ldi	r24, 0x20	; 32
  cc:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  ce:	5d 9b       	sbis	0x0b, 5	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <print_invalid+0x40>
	UDR = byte;
  d2:	8e e4       	ldi	r24, 0x4E	; 78
  d4:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <print_invalid+0x48>
	UDR = byte;
  da:	85 e7       	ldi	r24, 0x75	; 117
  dc:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  de:	5d 9b       	sbis	0x0b, 5	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <print_invalid+0x50>
	UDR = byte;
  e2:	8d e6       	ldi	r24, 0x6D	; 109
  e4:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <print_invalid+0x58>
	UDR = byte;
  ea:	82 e6       	ldi	r24, 0x62	; 98
  ec:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  ee:	5d 9b       	sbis	0x0b, 5	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <print_invalid+0x60>
	UDR = byte;
  f2:	85 e6       	ldi	r24, 0x65	; 101
  f4:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <print_invalid+0x68>
	UDR = byte;
  fa:	82 e7       	ldi	r24, 0x72	; 114
  fc:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  fe:	5d 9b       	sbis	0x0b, 5	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <print_invalid+0x70>
	UDR = byte;
 102:	1c b8       	out	0x0c, r1	; 12
	usart_transmit('m');
	usart_transmit('b');
	usart_transmit('e');
	usart_transmit('r');
	usart_transmit(0x00);
}
 104:	08 95       	ret

00000106 <print_number>:
void  print_number(unsigned char number){
 106:	98 2f       	mov	r25, r24
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 108:	5d 9b       	sbis	0x0b, 5	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <print_number+0x2>
	UDR = byte;
 10c:	8e e4       	ldi	r24, 0x4E	; 78
 10e:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 110:	5d 9b       	sbis	0x0b, 5	; 11
 112:	fe cf       	rjmp	.-4      	; 0x110 <print_number+0xa>
	UDR = byte;
 114:	85 e7       	ldi	r24, 0x75	; 117
 116:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 118:	5d 9b       	sbis	0x0b, 5	; 11
 11a:	fe cf       	rjmp	.-4      	; 0x118 <print_number+0x12>
	UDR = byte;
 11c:	8d e6       	ldi	r24, 0x6D	; 109
 11e:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 120:	5d 9b       	sbis	0x0b, 5	; 11
 122:	fe cf       	rjmp	.-4      	; 0x120 <print_number+0x1a>
	UDR = byte;
 124:	82 e6       	ldi	r24, 0x62	; 98
 126:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 128:	5d 9b       	sbis	0x0b, 5	; 11
 12a:	fe cf       	rjmp	.-4      	; 0x128 <print_number+0x22>
	UDR = byte;
 12c:	85 e6       	ldi	r24, 0x65	; 101
 12e:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 130:	5d 9b       	sbis	0x0b, 5	; 11
 132:	fe cf       	rjmp	.-4      	; 0x130 <print_number+0x2a>
	UDR = byte;
 134:	82 e7       	ldi	r24, 0x72	; 114
 136:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 138:	5d 9b       	sbis	0x0b, 5	; 11
 13a:	fe cf       	rjmp	.-4      	; 0x138 <print_number+0x32>
	UDR = byte;
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 140:	5d 9b       	sbis	0x0b, 5	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <print_number+0x3a>
	UDR = byte;
 144:	82 e5       	ldi	r24, 0x52	; 82
 146:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 148:	5d 9b       	sbis	0x0b, 5	; 11
 14a:	fe cf       	rjmp	.-4      	; 0x148 <print_number+0x42>
	UDR = byte;
 14c:	85 e6       	ldi	r24, 0x65	; 101
 14e:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 150:	5d 9b       	sbis	0x0b, 5	; 11
 152:	fe cf       	rjmp	.-4      	; 0x150 <print_number+0x4a>
	UDR = byte;
 154:	81 e6       	ldi	r24, 0x61	; 97
 156:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 158:	5d 9b       	sbis	0x0b, 5	; 11
 15a:	fe cf       	rjmp	.-4      	; 0x158 <print_number+0x52>
	UDR = byte;
 15c:	84 e6       	ldi	r24, 0x64	; 100
 15e:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 160:	5d 9b       	sbis	0x0b, 5	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <print_number+0x5a>
	UDR = byte;
 164:	8a e3       	ldi	r24, 0x3A	; 58
 166:	8c b9       	out	0x0c, r24	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 168:	5d 9b       	sbis	0x0b, 5	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <print_number+0x62>
	UDR = byte;
 16c:	1c b8       	out	0x0c, r1	; 12
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 16e:	5d 9b       	sbis	0x0b, 5	; 11
 170:	fe cf       	rjmp	.-4      	; 0x16e <print_number+0x68>
	UDR = byte;
 172:	9c b9       	out	0x0c, r25	; 12
	usart_transmit('a');
	usart_transmit('d');
	usart_transmit(':');
	usart_transmit(0x00);
	usart_transmit(number);
}
 174:	08 95       	ret

00000176 <turn_on_leds>:
void turn_on_leds(unsigned char input){
switch (input){
 176:	84 33       	cpi	r24, 0x34	; 52
 178:	c1 f0       	breq	.+48     	; 0x1aa <turn_on_leds+0x34>
 17a:	85 33       	cpi	r24, 0x35	; 53
 17c:	38 f4       	brcc	.+14     	; 0x18c <turn_on_leds+0x16>
 17e:	82 33       	cpi	r24, 0x32	; 50
 180:	81 f0       	breq	.+32     	; 0x1a2 <turn_on_leds+0x2c>
 182:	83 33       	cpi	r24, 0x33	; 51
 184:	80 f4       	brcc	.+32     	; 0x1a6 <turn_on_leds+0x30>
 186:	81 33       	cpi	r24, 0x31	; 49
 188:	d9 f4       	brne	.+54     	; 0x1c0 <turn_on_leds+0x4a>
 18a:	09 c0       	rjmp	.+18     	; 0x19e <turn_on_leds+0x28>
 18c:	86 33       	cpi	r24, 0x36	; 54
 18e:	89 f0       	breq	.+34     	; 0x1b2 <turn_on_leds+0x3c>
 190:	86 33       	cpi	r24, 0x36	; 54
 192:	68 f0       	brcs	.+26     	; 0x1ae <turn_on_leds+0x38>
 194:	87 33       	cpi	r24, 0x37	; 55
 196:	79 f0       	breq	.+30     	; 0x1b6 <turn_on_leds+0x40>
 198:	88 33       	cpi	r24, 0x38	; 56
 19a:	91 f4       	brne	.+36     	; 0x1c0 <turn_on_leds+0x4a>
 19c:	0f c0       	rjmp	.+30     	; 0x1bc <turn_on_leds+0x46>
	case '1':
	PORTB = 0x01;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0b c0       	rjmp	.+22     	; 0x1b8 <turn_on_leds+0x42>
	break;
	case '2':
	PORTB = 0x03;
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	09 c0       	rjmp	.+18     	; 0x1b8 <turn_on_leds+0x42>
	break;
	case '3':
	PORTB = 0X07;
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <turn_on_leds+0x42>
	break;
	case '4':
	PORTB = 0x0F;
 1aa:	8f e0       	ldi	r24, 0x0F	; 15
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <turn_on_leds+0x42>
	break;
	case '5':
	PORTB = 0X1F;
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <turn_on_leds+0x42>
	break;
	case '6':
	PORTB = 0X3F;
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <turn_on_leds+0x42>
	break;
	case '7':
	PORTB = 0X7F;
 1b6:	8f e7       	ldi	r24, 0x7F	; 127
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	08 95       	ret
	break;
	case '8':
	PORTB = 0xFF;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	88 bb       	out	0x18, r24	; 24
 1c0:	08 95       	ret

000001c2 <main>:
	break;
}
return;
}
int main(void)
{   unsigned char input;
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
	DDRB = 0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	87 bb       	out	0x17, r24	; 23
 */ 

#include <avr/io.h>

void usart_init(void){
	UCSRA = 0; //Initialize USCRA as 0
 1ca:	1b b8       	out	0x0b, r1	; 11
	// Activate transmitter receiver
	UCSRB = (1 << RXEN) | (1<< TXEN);
 1cc:	88 e1       	ldi	r24, 0x18	; 24
 1ce:	8a b9       	out	0x0a, r24	; 10
	//Baud rate = 9600
	UBRRH = 0;
 1d0:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
 1d2:	83 e3       	ldi	r24, 0x33	; 51
 1d4:	89 b9       	out	0x09, r24	; 9
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
 1d6:	86 e8       	ldi	r24, 0x86	; 134
 1d8:	80 bd       	out	0x20, r24	; 32
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
	UDR = byte;
 1da:	0a e0       	ldi	r16, 0x0A	; 10
}
unsigned char  usart_receive(void ){
	while(!(UCSRA &(1 << RXC)));
 1dc:	5f 9b       	sbis	0x0b, 7	; 11
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <main+0x1a>
	return  UDR;
 1e0:	1c b1       	in	r17, 0x0c	; 12
	DDRB = 0xFF;
	usart_init();
     while (1) 
    {
		input = usart_receive();
		if(input == '9'){
 1e2:	19 33       	cpi	r17, 0x39	; 57
 1e4:	31 f4       	brne	.+12     	; 0x1f2 <main+0x30>
			print_invalid();
 1e6:	0e 94 47 00 	call	0x8e	; 0x8e <print_invalid>
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 1ea:	5d 9b       	sbis	0x0b, 5	; 11
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <main+0x28>
	UDR = byte;
 1ee:	0c b9       	out	0x0c, r16	; 12
 1f0:	f5 cf       	rjmp	.-22     	; 0x1dc <main+0x1a>
		input = usart_receive();
		if(input == '9'){
			print_invalid();
			usart_transmit('\n');
		}
		else if(input== '0'){
 1f2:	10 33       	cpi	r17, 0x30	; 48
 1f4:	41 f4       	brne	.+16     	; 0x206 <main+0x44>
			print_number(input);
 1f6:	80 e3       	ldi	r24, 0x30	; 48
 1f8:	0e 94 83 00 	call	0x106	; 0x106 <print_number>
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 1fc:	5d 9b       	sbis	0x0b, 5	; 11
 1fe:	fe cf       	rjmp	.-4      	; 0x1fc <main+0x3a>
	UDR = byte;
 200:	0c b9       	out	0x0c, r16	; 12
			usart_transmit('\n');
		}
		else if(input== '0'){
			print_number(input);
			usart_transmit('\n');
			PORTB = 0X00;
 202:	18 ba       	out	0x18, r1	; 24
 204:	eb cf       	rjmp	.-42     	; 0x1dc <main+0x1a>
		}
		else{
			print_number(input);
 206:	81 2f       	mov	r24, r17
 208:	0e 94 83 00 	call	0x106	; 0x106 <print_number>
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
 20c:	5d 9b       	sbis	0x0b, 5	; 11
 20e:	fe cf       	rjmp	.-4      	; 0x20c <main+0x4a>
	UDR = byte;
 210:	0c b9       	out	0x0c, r16	; 12
			PORTB = 0X00;
		}
		else{
			print_number(input);
			usart_transmit('\n');
			turn_on_leds(input);	
 212:	81 2f       	mov	r24, r17
 214:	0e 94 bb 00 	call	0x176	; 0x176 <turn_on_leds>
 218:	e1 cf       	rjmp	.-62     	; 0x1dc <main+0x1a>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
