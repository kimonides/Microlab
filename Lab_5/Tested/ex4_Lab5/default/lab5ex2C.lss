
lab5ex2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005c  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000257  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010f  00000000  00000000  00000477  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000022f  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f3  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000056  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  00000961  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void usart_transmit(char data);
char usart_receive();
void ADC_init();

int main(void)
{	char decimal_point,int_point;
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
}


void ADC_init()
{
	ADMUX = 1<<REFS0;
  70:	80 e4       	ldi	r24, 0x40	; 64
  72:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  74:	87 e8       	ldi	r24, 0x87	; 135
  76:	86 b9       	out	0x06, r24	; 6
Transmitter on
Receiver on
Communication parameters: 8 Data ,1 Stop , no Parity */
void usart_init()
{
	UCSRA = 0x00;
  78:	1b b8       	out	0x0b, r1	; 11
	UCSRB = (1<<RXEN) | (1<<TXEN);
  7a:	88 e1       	ldi	r24, 0x18	; 24
  7c:	8a b9       	out	0x0a, r24	; 10
	UBRRH = 0x00;
  7e:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
  80:	83 e3       	ldi	r24, 0x33	; 51
  82:	89 b9       	out	0x09, r24	; 9
	UCSRC = (1<<URSEL) | (3<<UCSZ0);
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	80 bd       	out	0x20, r24	; 32
int main(void)
{	char decimal_point,int_point;
	int ADC_input;
	ADC_init();
	usart_init();
    ADCSRA|=(1<<ADSC);
  88:	36 9a       	sbi	0x06, 6	; 6

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
	UDR = data;
  8a:	0c e2       	ldi	r16, 0x2C	; 44
	ADC_init();
	usart_init();
    ADCSRA|=(1<<ADSC);
	while(1) 
    {
		while( ADCSRA & (1<<ADSC) );
  8c:	17 e3       	ldi	r17, 0x37	; 55
  8e:	f5 e3       	ldi	r31, 0x35	; 53
  90:	ba e0       	ldi	r27, 0x0A	; 10
  92:	e0 e3       	ldi	r30, 0x30	; 48
  94:	a2 e3       	ldi	r26, 0x32	; 50
  96:	36 99       	sbic	0x06, 6	; 6
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x2a>

		ADC_input = ADCL | (ADCH << 8);
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	25 b1       	in	r18, 0x05	; 5
  9e:	72 2f       	mov	r23, r18
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	86 2b       	or	r24, r22
  a6:	97 2b       	or	r25, r23
		ADC_input*=5;
  a8:	ac 01       	movw	r20, r24
  aa:	44 0f       	add	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	44 0f       	add	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	48 0f       	add	r20, r24
  b4:	59 1f       	adc	r21, r25
	
		decimal_point = (ADC_input & 0x0300) >> 8 ;
  b6:	35 2f       	mov	r19, r21
  b8:	33 70       	andi	r19, 0x03	; 3
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <main+0x4e>
		ADC_input*=5;
	
		decimal_point = (ADC_input & 0x0300) >> 8 ;
		int_point = (ADC_input & 0x1C00) >> 10 ;

		usart_transmit(int_point+48);
  be:	ca 01       	movw	r24, r20
  c0:	80 70       	andi	r24, 0x00	; 0
  c2:	9c 71       	andi	r25, 0x1C	; 28
  c4:	89 2f       	mov	r24, r25
  c6:	99 0f       	add	r25, r25
  c8:	99 0b       	sbc	r25, r25
  ca:	85 95       	asr	r24
  cc:	85 95       	asr	r24
  ce:	80 5d       	subi	r24, 0xD0	; 208

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
	UDR = data;
  d0:	8c b9       	out	0x0c, r24	; 12
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
  d2:	5d 9b       	sbis	0x0b, 5	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <main+0x66>
	UDR = data;
  d6:	0c b9       	out	0x0c, r16	; 12
		int_point = (ADC_input & 0x1C00) >> 10 ;

		usart_transmit(int_point+48);
		usart_transmit(',');
	
		if(decimal_point == 0x03)
  d8:	33 30       	cpi	r19, 0x03	; 3
  da:	31 f4       	brne	.+12     	; 0xe8 <main+0x7c>
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x70>
	UDR = data;
  e0:	1c b9       	out	0x0c, r17	; 12
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <main+0x76>
  e6:	0f c0       	rjmp	.+30     	; 0x106 <main+0x9a>
		if(decimal_point == 0x03)
		{
			usart_transmit('7');
			usart_transmit('5');
		}
		else if(decimal_point == 0x02)
  e8:	32 30       	cpi	r19, 0x02	; 2
  ea:	31 f4       	brne	.+12     	; 0xf8 <main+0x8c>
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <main+0x80>
	UDR = data;
  f0:	fc b9       	out	0x0c, r31	; 12
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
  f2:	5d 9b       	sbis	0x0b, 5	; 11
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <main+0x86>
  f6:	0e c0       	rjmp	.+28     	; 0x114 <main+0xa8>
		else if(decimal_point == 0x02)
		{
			usart_transmit('5');
			usart_transmit('0');
		}
		else if(decimal_point == 0x01)
  f8:	31 30       	cpi	r19, 0x01	; 1
  fa:	39 f4       	brne	.+14     	; 0x10a <main+0x9e>
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
  fc:	5d 9b       	sbis	0x0b, 5	; 11
  fe:	fe cf       	rjmp	.-4      	; 0xfc <main+0x90>
	UDR = data;
 100:	ac b9       	out	0x0c, r26	; 12
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
 102:	5d 9b       	sbis	0x0b, 5	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <main+0x96>
	UDR = data;
 106:	fc b9       	out	0x0c, r31	; 12
 108:	06 c0       	rjmp	.+12     	; 0x116 <main+0xaa>
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
 10a:	5d 9b       	sbis	0x0b, 5	; 11
 10c:	fe cf       	rjmp	.-4      	; 0x10a <main+0x9e>
	UDR = data;
 10e:	ec b9       	out	0x0c, r30	; 12
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
 110:	5d 9b       	sbis	0x0b, 5	; 11
 112:	fe cf       	rjmp	.-4      	; 0x110 <main+0xa4>
	UDR = data;
 114:	ec b9       	out	0x0c, r30	; 12
}

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
 116:	5d 9b       	sbis	0x0b, 5	; 11
 118:	fe cf       	rjmp	.-4      	; 0x116 <main+0xaa>
	UDR = data;
 11a:	bc b9       	out	0x0c, r27	; 12
		{
			usart_transmit('0');
			usart_transmit('0');
		}
		usart_transmit('\n');
		ADCSRA|=(1<<ADSC);
 11c:	36 9a       	sbi	0x06, 6	; 6
 11e:	bb cf       	rjmp	.-138    	; 0x96 <main+0x2a>

00000120 <ADC_init>:
}


void ADC_init()
{
	ADMUX = 1<<REFS0;
 120:	80 e4       	ldi	r24, 0x40	; 64
 122:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 124:	87 e8       	ldi	r24, 0x87	; 135
 126:	86 b9       	out	0x06, r24	; 6
	return;
}
 128:	08 95       	ret

0000012a <usart_init>:
Transmitter on
Receiver on
Communication parameters: 8 Data ,1 Stop , no Parity */
void usart_init()
{
	UCSRA = 0x00;
 12a:	1b b8       	out	0x0b, r1	; 11
	UCSRB = (1<<RXEN) | (1<<TXEN);
 12c:	88 e1       	ldi	r24, 0x18	; 24
 12e:	8a b9       	out	0x0a, r24	; 10
	UBRRH = 0x00;
 130:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
 132:	83 e3       	ldi	r24, 0x33	; 51
 134:	89 b9       	out	0x09, r24	; 9
	UCSRC = (1<<URSEL) | (3<<UCSZ0);
 136:	86 e8       	ldi	r24, 0x86	; 134
 138:	80 bd       	out	0x20, r24	; 32
}
 13a:	08 95       	ret

0000013c <usart_transmit>:

//Function that transmits the value of DATA using USART
void usart_transmit(char data)
{
	while( !(UCSRA & (1<<UDRE)) ); //check if USART is ready to transmit else wait
 13c:	5d 9b       	sbis	0x0b, 5	; 11
 13e:	fe cf       	rjmp	.-4      	; 0x13c <usart_transmit>
	UDR = data;
 140:	8c b9       	out	0x0c, r24	; 12
	return;
}
 142:	08 95       	ret

00000144 <usart_receive>:

//Function receives a byte of data through the USART
char usart_receive()
{
	while( !(UCSRA & (1<<RXC)) );
 144:	5f 9b       	sbis	0x0b, 7	; 11
 146:	fe cf       	rjmp	.-4      	; 0x144 <usart_receive>
	return UDR;
 148:	8c b1       	in	r24, 0x0c	; 12
}
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
