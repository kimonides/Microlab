
ex3c_lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fc  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000600  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000336  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035b  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000175  00000000  00000000  0000167b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 88 00 	call	0x110	; 0x110 <main>
  74:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:
#include <avr/interrupt.h>
#include <util/delay.h>

volatile unsigned char temp;

ISR(INT1_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
	do{
		GIFR = (1<<INTF1);
  90:	90 e8       	ldi	r25, 0x80	; 128
  92:	9a bf       	out	0x3a, r25	; 58
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	ef e0       	ldi	r30, 0x0F	; 15
  96:	f7 e2       	ldi	r31, 0x27	; 39
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <__vector_2+0x1c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <__vector_2+0x22>
  9e:	00 00       	nop
		_delay_ms(5);
		temp = GIFR;
  a0:	8a b7       	in	r24, 0x3a	; 58
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

	}while((temp & 0x80) == 0x80);
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  aa:	88 23       	and	r24, r24
  ac:	94 f3       	brlt	.-28     	; 0x92 <__vector_2+0x16>
	/*GIFR = (0<<INTF1);*/
	if((PORTB & 0x01) == 0x00)
  ae:	c0 99       	sbic	0x18, 0	; 24
  b0:	07 c0       	rjmp	.+14     	; 0xc0 <__vector_2+0x44>
	{
		TCNT1=0x8526;
  b2:	86 e2       	ldi	r24, 0x26	; 38
  b4:	95 e8       	ldi	r25, 0x85	; 133
  b6:	9d bd       	out	0x2d, r25	; 45
  b8:	8c bd       	out	0x2c, r24	; 44
		PORTB=0x01;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	88 bb       	out	0x18, r24	; 24
  be:	13 c0       	rjmp	.+38     	; 0xe6 <__vector_2+0x6a>
	}
	else if((PORTB & 0x01) == 0x01)
  c0:	c0 9b       	sbis	0x18, 0	; 24
  c2:	11 c0       	rjmp	.+34     	; 0xe6 <__vector_2+0x6a>
	{
		PORTB = 0XFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	ff ef       	ldi	r31, 0xFF	; 255
  ca:	24 e3       	ldi	r18, 0x34	; 52
  cc:	8c e0       	ldi	r24, 0x0C	; 12
  ce:	f1 50       	subi	r31, 0x01	; 1
  d0:	20 40       	sbci	r18, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_2+0x52>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_2+0x5c>
  d8:	00 00       	nop
		_delay_ms(500);
		TCNT1 = 0x8526;
  da:	86 e2       	ldi	r24, 0x26	; 38
  dc:	95 e8       	ldi	r25, 0x85	; 133
  de:	9d bd       	out	0x2d, r25	; 45
  e0:	8c bd       	out	0x2c, r24	; 44
		PORTB = 0x01;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	88 bb       	out	0x18, r24	; 24
	}
	

}
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_8>:

ISR(TIMER1_OVF_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
	PORTB = 0x00;
 104:	18 ba       	out	0x18, r1	; 24
}
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:



int main(void){
	MCUCR = (1<<ISC11)|(1<<ISC10);
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	85 bf       	out	0x35, r24	; 53
	GICR  = (1<<INT1);
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	8b bf       	out	0x3b, r24	; 59
	TIMSK = (1<<TOIE1);
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	89 bf       	out	0x39, r24	; 57
	TCCR1B =((1<<CS12)|(0<<CS11)|(1<<CS10));
 11c:	85 e0       	ldi	r24, 0x05	; 5
 11e:	8e bd       	out	0x2e, r24	; 46
	sei();
 120:	78 94       	sei

	DDRB  = 0xFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bb       	out	0x17, r24	; 23
	DDRA  = 0x00;
 126:	1a ba       	out	0x1a, r1	; 26
				TCNT1=0x8526;
				PORTB=0x01;
			}
			else if((PORTB & 0x01) == 0x01)
			{
				PORTB = 0xFF;
 128:	9f ef       	ldi	r25, 0xFF	; 255
				_delay_ms(500);
				TCNT1 = 0X8526;
 12a:	26 e2       	ldi	r18, 0x26	; 38
 12c:	35 e8       	ldi	r19, 0x85	; 133
				PORTB = 0X01;
 12e:	81 e0       	ldi	r24, 0x01	; 1

	DDRB  = 0xFF;
	DDRA  = 0x00;

	while(1){
		if((PINA & 0x80)==0x80){
 130:	cf 9b       	sbis	0x19, 7	; 25
 132:	fe cf       	rjmp	.-4      	; 0x130 <main+0x20>
			while((PINA & 0x80)== 0x80);
 134:	cf 99       	sbic	0x19, 7	; 25
 136:	fe cf       	rjmp	.-4      	; 0x134 <main+0x24>
			if((PORTB & 0x01)==0x00)
 138:	c0 99       	sbic	0x18, 0	; 24
 13a:	04 c0       	rjmp	.+8      	; 0x144 <main+0x34>
			{
				TCNT1=0x8526;
 13c:	3d bd       	out	0x2d, r19	; 45
 13e:	2c bd       	out	0x2c, r18	; 44
				PORTB=0x01;
 140:	88 bb       	out	0x18, r24	; 24
 142:	f6 cf       	rjmp	.-20     	; 0x130 <main+0x20>
			}
			else if((PORTB & 0x01) == 0x01)
 144:	c0 9b       	sbis	0x18, 0	; 24
 146:	f4 cf       	rjmp	.-24     	; 0x130 <main+0x20>
			{
				PORTB = 0xFF;
 148:	98 bb       	out	0x18, r25	; 24
 14a:	4f ef       	ldi	r20, 0xFF	; 255
 14c:	54 e3       	ldi	r21, 0x34	; 52
 14e:	6c e0       	ldi	r22, 0x0C	; 12
 150:	41 50       	subi	r20, 0x01	; 1
 152:	50 40       	sbci	r21, 0x00	; 0
 154:	60 40       	sbci	r22, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x40>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x4a>
 15a:	00 00       	nop
				_delay_ms(500);
				TCNT1 = 0X8526;
 15c:	3d bd       	out	0x2d, r19	; 45
 15e:	2c bd       	out	0x2c, r18	; 44
				PORTB = 0X01;
 160:	88 bb       	out	0x18, r24	; 24
 162:	e6 cf       	rjmp	.-52     	; 0x130 <main+0x20>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
