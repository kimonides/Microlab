
ex3c_lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001de  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004b  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001de  00000000  00000000  00000249  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000131  00000000  00000000  00000427  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000290  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f9  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000048  00000000  00000000  00000921  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  74:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:
#include <util/delay.h>

volatile unsigned char temp;
volatile unsigned char cntr;

ISR(INT1_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31
	do{
		GIFR = (1<<INTF1);
  94:	40 e8       	ldi	r20, 0x80	; 128
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	20 e1       	ldi	r18, 0x10	; 16
  98:	37 e2       	ldi	r19, 0x27	; 39
  9a:	4a bf       	out	0x3a, r20	; 58
  9c:	c9 01       	movw	r24, r18
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <__vector_2+0x22>
		_delay_ms(5);
		temp = GIFR;
  a2:	8a b7       	in	r24, 0x3a	; 58
  a4:	80 93 60 00 	sts	0x0060, r24

	}while((temp & 0x80) == 0x80);
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	87 fd       	sbrc	r24, 7
  ae:	f5 cf       	rjmp	.-22     	; 0x9a <__vector_2+0x1e>
	/*GIFR = (0<<INTF1);*/
	if((PORTB & 0x01) == 0x00)
  b0:	c0 9b       	sbis	0x18, 0	; 24
  b2:	0d c0       	rjmp	.+26     	; 0xce <__vector_2+0x52>
	    TIMSK = (1<<TOIE1);
	    TCCR1B =((1<<CS12)|(0<<CS11)|(1<<CS10));
		TCNT1=0x8526;
		PORTB=0x01;
	}
	else if((PORTB & 0x01) == 0x01)
  b4:	c0 9b       	sbis	0x18, 0	; 24
  b6:	15 c0       	rjmp	.+42     	; 0xe2 <__vector_2+0x66>
	{
		PORTB = 0XFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	88 e8       	ldi	r24, 0x88	; 136
  be:	93 e1       	ldi	r25, 0x13	; 19
  c0:	28 ec       	ldi	r18, 0xC8	; 200
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <__vector_2+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__vector_2+0x48>
		_delay_ms(500);
		
	    TIMSK = (1<<TOIE1);
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	89 bf       	out	0x39, r24	; 57
	    TCCR1B =((1<<CS12)|(0<<CS11)|(1<<CS10));
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0x8526;
  d6:	86 e2       	ldi	r24, 0x26	; 38
  d8:	95 e8       	ldi	r25, 0x85	; 133
  da:	9d bd       	out	0x2d, r25	; 45
  dc:	8c bd       	out	0x2c, r24	; 44
		PORTB = 0x01;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	88 bb       	out	0x18, r24	; 24
	}
	

}
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_8>:

ISR(TIMER1_OVF_vect)
{   TIMSK = (0<<TOIE1);
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	19 be       	out	0x39, r1	; 57
    TCCR1B = ((0<<CS12)|(0<<CS11)|(0<<CS10));
 106:	1e bc       	out	0x2e, r1	; 46
	//cntr++;
    //PORTC = cntr;
	PORTB = 0x00;
 108:	18 ba       	out	0x18, r1	; 24
}
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <main>:



int main(void){
	MCUCR = (1<<ISC11)|(1<<ISC10);
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	85 bf       	out	0x35, r24	; 53
	GICR  = (1<<INT1);
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	8b bf       	out	0x3b, r24	; 59
	sei();
 11c:	78 94       	sei

	DDRB  = 0xFF;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	87 bb       	out	0x17, r24	; 23
	DDRC  = 0xFF;
 122:	84 bb       	out	0x14, r24	; 20
	DDRA  = 0x00;
 124:	1a ba       	out	0x1a, r1	; 26
    cntr  = 0x00;
 126:	10 92 61 00 	sts	0x0061, r1
				TCNT1=0x8526;
				PORTB=0x01;
			}
			else if((PORTB & 0x01) == 0x01)
			{
				PORTB = 0xFF;
 12a:	bf ef       	ldi	r27, 0xFF	; 255
 12c:	48 ec       	ldi	r20, 0xC8	; 200
 12e:	50 e0       	ldi	r21, 0x00	; 0
				_delay_ms(500);
				
	            TIMSK = (1<<TOIE1);
 130:	a4 e0       	ldi	r26, 0x04	; 4
	            TCCR1B =((1<<CS12)|(0<<CS11)|(1<<CS10));
 132:	75 e0       	ldi	r23, 0x05	; 5
				TCNT1 = 0X8526;
 134:	26 e2       	ldi	r18, 0x26	; 38
 136:	35 e8       	ldi	r19, 0x85	; 133
				PORTB = 0X01;
 138:	61 e0       	ldi	r22, 0x01	; 1
	DDRC  = 0xFF;
	DDRA  = 0x00;
    cntr  = 0x00;

	while(1){
		if((PINA & 0x80)==0x80){
 13a:	cf 9b       	sbis	0x19, 7	; 25
 13c:	fe cf       	rjmp	.-4      	; 0x13a <main+0x26>
			while((PINA & 0x80)== 0x80);
 13e:	cf 99       	sbic	0x19, 7	; 25
 140:	fe cf       	rjmp	.-4      	; 0x13e <main+0x2a>
			if((PORTB & 0x01)==0x00)
 142:	c0 9b       	sbis	0x18, 0	; 24
 144:	0a c0       	rjmp	.+20     	; 0x15a <main+0x46>
	            TIMSK = (1<<TOIE1);
	            TCCR1B =((1<<CS12)|(0<<CS11)|(1<<CS10));
				TCNT1=0x8526;
				PORTB=0x01;
			}
			else if((PORTB & 0x01) == 0x01)
 146:	c0 9b       	sbis	0x18, 0	; 24
 148:	f8 cf       	rjmp	.-16     	; 0x13a <main+0x26>
			{
				PORTB = 0xFF;
 14a:	b8 bb       	out	0x18, r27	; 24
 14c:	88 e8       	ldi	r24, 0x88	; 136
 14e:	93 e1       	ldi	r25, 0x13	; 19
 150:	fa 01       	movw	r30, r20
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 156:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 158:	d9 f7       	brne	.-10     	; 0x150 <main+0x3c>
				_delay_ms(500);
				
	            TIMSK = (1<<TOIE1);
 15a:	a9 bf       	out	0x39, r26	; 57
	            TCCR1B =((1<<CS12)|(0<<CS11)|(1<<CS10));
 15c:	7e bd       	out	0x2e, r23	; 46
				TCNT1 = 0X8526;
 15e:	3d bd       	out	0x2d, r19	; 45
 160:	2c bd       	out	0x2c, r18	; 44
				PORTB = 0X01;
 162:	68 bb       	out	0x18, r22	; 24
 164:	ea cf       	rjmp	.-44     	; 0x13a <main+0x26>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
