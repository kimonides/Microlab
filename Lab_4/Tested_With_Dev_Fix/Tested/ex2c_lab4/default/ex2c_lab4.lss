
ex2c_lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000003fe  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000131  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000847  00000000  00000000  0000054f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bd  00000000  00000000  00000d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005f2  00000000  00000000  00000f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000238  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000302  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
  74:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <write_2_nibbles>:

char hun,dec,mon,sign;

void write_2_nibbles(char data)
{
	char previous_state = PIND;
  7c:	20 b3       	in	r18, 0x10	; 16
	PORTD = (data&0xf0) | (previous_state&0x0f);
  7e:	2f 70       	andi	r18, 0x0F	; 15
  80:	98 2f       	mov	r25, r24
  82:	90 7f       	andi	r25, 0xF0	; 240
  84:	92 2b       	or	r25, r18
  86:	92 bb       	out	0x12, r25	; 18
	
	PORTD |= (1<<PD3);
  88:	93 9a       	sbi	0x12, 3	; 18
	PORTD &= ~(1<<PD3);
  8a:	93 98       	cbi	0x12, 3	; 18
	
	PORTD = ((data&0x0f)<<4) | (previous_state&0x0f);
  8c:	82 95       	swap	r24
  8e:	80 7f       	andi	r24, 0xF0	; 240
  90:	28 2b       	or	r18, r24
  92:	22 bb       	out	0x12, r18	; 18
	
	PORTD |= (1<<PD3);
  94:	93 9a       	sbi	0x12, 3	; 18
	PORTD &= ~(1<<PD3);
  96:	93 98       	cbi	0x12, 3	; 18
	
	return;
}
  98:	08 95       	ret

0000009a <lcd_data>:

void lcd_data(char data)
{
	PORTD |= (1<<PD2);
  9a:	92 9a       	sbi	0x12, 2	; 18
	write_2_nibbles(data);
  9c:	0e 94 3e 00 	call	0x7c	; 0x7c <write_2_nibbles>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  a0:	82 e7       	ldi	r24, 0x72	; 114
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_data+0x8>
	
	_delay_us(43);
	
	return;
}
  a6:	08 95       	ret

000000a8 <lcd_command>:


void lcd_command(char command)
{
	PORTD &= ~(1<<PD2);
  a8:	92 98       	cbi	0x12, 2	; 18
	write_2_nibbles(command);
  aa:	0e 94 3e 00 	call	0x7c	; 0x7c <write_2_nibbles>
  ae:	88 e6       	ldi	r24, 0x68	; 104
  b0:	8a 95       	dec	r24
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_command+0x8>
	
	_delay_us(39);
	
	return;
}
  b4:	08 95       	ret

000000b6 <lcd_init>:


void lcd_init()
{
  b6:	80 e9       	ldi	r24, 0x90	; 144
  b8:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	28 ec       	ldi	r18, 0xC8	; 200
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	f9 01       	movw	r30, r18
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcd_init+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <lcd_init+0x8>
	_delay_ms(40);
	PORTD = 0x30;
  c8:	80 e3       	ldi	r24, 0x30	; 48
  ca:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<PD3);
  cc:	93 9a       	sbi	0x12, 3	; 18
	PORTD &= ~(1<<PD3);
  ce:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  d0:	98 e6       	ldi	r25, 0x68	; 104
  d2:	29 2f       	mov	r18, r25
  d4:	2a 95       	dec	r18
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_init+0x1e>
	_delay_us(39);
	
	PORTD = 0x30;
  d8:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<PD3);
  da:	93 9a       	sbi	0x12, 3	; 18
	PORTD &= ~(1<<PD3);
  dc:	93 98       	cbi	0x12, 3	; 18
  de:	85 e3       	ldi	r24, 0x35	; 53
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_init+0x2a>
	_delay_us(20);
	
	PORTD = 0x20;
  e4:	80 e2       	ldi	r24, 0x20	; 32
  e6:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<PD3);
  e8:	93 9a       	sbi	0x12, 3	; 18
	PORTD &= ~(1<<PD3);
  ea:	93 98       	cbi	0x12, 3	; 18
  ec:	9a 95       	dec	r25
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_init+0x36>
	_delay_us(39);
	
	lcd_command(0x28);
  f0:	88 e2       	ldi	r24, 0x28	; 40
  f2:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_command>
	lcd_command(0x0c);
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_command>
	lcd_command(0x01);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_command>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 102:	84 ef       	ldi	r24, 0xF4	; 244
 104:	9b e0       	ldi	r25, 0x0B	; 11
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_init+0x50>
	
	_delay_us(1530);
	
	lcd_command(0x06);
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_command>
	
	return;
}
 110:	08 95       	ret

00000112 <one_wire_reset>:
unsigned char one_wire_reset(){
	unsigned char crc;
	DDRA  |=  (1 << PA4);
 112:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
 114:	dc 98       	cbi	0x1b, 4	; 27
 116:	80 ec       	ldi	r24, 0xC0	; 192
 118:	93 e0       	ldi	r25, 0x03	; 3
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <one_wire_reset+0x8>
	_delay_us(480);
	// mb DDRA= (0<<PA4)
	DDRA  &= ~(1 << PA4);
 11e:	d4 98       	cbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
 120:	dc 98       	cbi	0x1b, 4	; 27
 122:	88 ec       	ldi	r24, 0xC8	; 200
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <one_wire_reset+0x14>
	_delay_us(100);
	crc = PINA ;
 12a:	89 b3       	in	r24, 0x19	; 25
 12c:	e8 ef       	ldi	r30, 0xF8	; 248
 12e:	f2 e0       	ldi	r31, 0x02	; 2
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <one_wire_reset+0x1e>
 134:	82 95       	swap	r24
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	80 95       	com	r24
	}
	else{
		return 1;
	}	
	return -1;
}
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <one_wire_transmit_bit>:

void one_wire_transmit_bit(unsigned char bit){
	DDRA  |=   (1<<PA4);
 13e:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1<<PA4);
 140:	dc 98       	cbi	0x1b, 4	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 142:	95 e0       	ldi	r25, 0x05	; 5
 144:	9a 95       	dec	r25
 146:	f1 f7       	brne	.-4      	; 0x144 <one_wire_transmit_bit+0x6>
	_delay_us(2);
	if((bit & 0x01)==0x01){
 148:	80 ff       	sbrs	r24, 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <one_wire_transmit_bit+0x12>
		PORTA |= (1<<PA4);
 14c:	dc 9a       	sbi	0x1b, 4	; 27
 14e:	03 c0       	rjmp	.+6      	; 0x156 <one_wire_transmit_bit+0x18>
	}
	if((bit & 0x01)==0x00){
		PORTA &= (1<<PA4);
 150:	8b b3       	in	r24, 0x1b	; 27
 152:	80 71       	andi	r24, 0x10	; 16
 154:	8b bb       	out	0x1b, r24	; 27
 156:	8a e9       	ldi	r24, 0x9A	; 154
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <one_wire_transmit_bit+0x1a>
	}
	_delay_us(58);
	DDRA  &= ~(1<<PA4);
 15c:	d4 98       	cbi	0x1a, 4	; 26
	PORTA &= ~(1<<PA4);
 15e:	dc 98       	cbi	0x1b, 4	; 27
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <one_wire_transmit_bit+0x24>
	_delay_us(1);
} 
 166:	08 95       	ret

00000168 <one_wire_transmit_byte>:

void one_wire_transmit_byte(unsigned char byte){
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	18 2f       	mov	r17, r24
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char bit_to_send;
	for(int i=0; i<8; i++){
		bit_to_send = byte & 0x01;
		if(bit_to_send == 0){
 174:	10 fd       	sbrc	r17, 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <one_wire_transmit_byte+0x14>
		one_wire_transmit_bit(0);
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	01 c0       	rjmp	.+2      	; 0x17e <one_wire_transmit_byte+0x16>
		}
		else if(bit_to_send == 1){
		one_wire_transmit_bit(1);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 9f 00 	call	0x13e	; 0x13e <one_wire_transmit_bit>
	_delay_us(1);
} 

void one_wire_transmit_byte(unsigned char byte){
	unsigned char bit_to_send;
	for(int i=0; i<8; i++){
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	c8 30       	cpi	r28, 0x08	; 8
 186:	d1 05       	cpc	r29, r1
 188:	11 f0       	breq	.+4      	; 0x18e <one_wire_transmit_byte+0x26>
		one_wire_transmit_bit(0);
		}
		else if(bit_to_send == 1){
		one_wire_transmit_bit(1);
		}
		byte = byte >> 1;
 18a:	16 95       	lsr	r17
 18c:	f3 cf       	rjmp	.-26     	; 0x174 <one_wire_transmit_byte+0xc>
	}	
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	08 95       	ret

00000196 <one_wire_receive_bit>:
unsigned char one_wire_receive_bit(){
	unsigned char bit_to_return = 0;
	DDRA  |=  (1 << PA4);
 196:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
 198:	dc 98       	cbi	0x1b, 4	; 27
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <one_wire_receive_bit+0x6>
	_delay_us(2);
	DDRA  &= ~(1 << PA4);
 1a0:	d4 98       	cbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
 1a2:	dc 98       	cbi	0x1b, 4	; 27
 1a4:	8a e1       	ldi	r24, 0x1A	; 26
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <one_wire_receive_bit+0x10>
	_delay_us(10);
	if( (PINA & 0X10) == 0x10 ){
 1aa:	89 b3       	in	r24, 0x19	; 25
 1ac:	92 e8       	ldi	r25, 0x82	; 130
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <one_wire_receive_bit+0x18>
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	24 e0       	ldi	r18, 0x04	; 4
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	2a 95       	dec	r18
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <one_wire_receive_bit+0x20>
		bit_to_return = 1;
	}
	_delay_us(49);
	return bit_to_return;
}
 1be:	81 70       	andi	r24, 0x01	; 1
 1c0:	08 95       	ret

000001c2 <one_wire_receive_byte>:
unsigned char one_wire_receive_byte(){
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char bit_received,byte_to_return=0;
	for(int i =0 ; i<8 ; i++){
		byte_to_return = byte_to_return >> 1;
		bit_received = one_wire_receive_bit();
 1ce:	0e 94 cb 00 	call	0x196	; 0x196 <one_wire_receive_bit>
		if(bit_received == 1){
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <one_wire_receive_byte+0x16>
 1d6:	80 e8       	ldi	r24, 0x80	; 128
	return bit_to_return;
}
unsigned char one_wire_receive_byte(){
	unsigned char bit_received,byte_to_return=0;
	for(int i =0 ; i<8 ; i++){
		byte_to_return = byte_to_return >> 1;
 1d8:	16 95       	lsr	r17
		bit_received = one_wire_receive_bit();
		if(bit_received == 1){
			bit_received = 0x80;	
		}
		byte_to_return= byte_to_return | bit_received ;
 1da:	18 2b       	or	r17, r24
	_delay_us(49);
	return bit_to_return;
}
unsigned char one_wire_receive_byte(){
	unsigned char bit_received,byte_to_return=0;
	for(int i =0 ; i<8 ; i++){
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	c8 30       	cpi	r28, 0x08	; 8
 1e0:	d1 05       	cpc	r29, r1
 1e2:	a9 f7       	brne	.-22     	; 0x1ce <one_wire_receive_byte+0xc>
			bit_received = 0x80;	
		}
		byte_to_return= byte_to_return | bit_received ;
	}
	return byte_to_return;
}
 1e4:	81 2f       	mov	r24, r17
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	08 95       	ret

000001ee <return_temp>:
unsigned int return_temp(){
 1ee:	1f 93       	push	r17
	unsigned char crc,finished,temp,temp_sign;
	int sign;
	crc = one_wire_reset();
 1f0:	0e 94 89 00 	call	0x112	; 0x112 <one_wire_reset>
    if(crc == 0x00){
 1f4:	88 23       	and	r24, r24
 1f6:	09 f1       	breq	.+66     	; 0x23a <return_temp+0x4c>
	   return 0x8000;
	}
	one_wire_transmit_byte(0xCC);
 1f8:	8c ec       	ldi	r24, 0xCC	; 204
 1fa:	0e 94 b4 00 	call	0x168	; 0x168 <one_wire_transmit_byte>
	one_wire_transmit_byte(0x44);
 1fe:	84 e4       	ldi	r24, 0x44	; 68
 200:	0e 94 b4 00 	call	0x168	; 0x168 <one_wire_transmit_byte>
	while(1){
		finished = one_wire_receive_bit();
 204:	0e 94 cb 00 	call	0x196	; 0x196 <one_wire_receive_bit>
		if((finished & 0x01) == 0x01){
 208:	80 ff       	sbrs	r24, 0
 20a:	fc cf       	rjmp	.-8      	; 0x204 <return_temp+0x16>
			break;
		}
	}
	crc = one_wire_reset();
 20c:	0e 94 89 00 	call	0x112	; 0x112 <one_wire_reset>
	if(crc == 0x00){
 210:	88 23       	and	r24, r24
 212:	99 f0       	breq	.+38     	; 0x23a <return_temp+0x4c>
		return 0x8000;
	}
	one_wire_transmit_byte(0xCC);
 214:	8c ec       	ldi	r24, 0xCC	; 204
 216:	0e 94 b4 00 	call	0x168	; 0x168 <one_wire_transmit_byte>
	one_wire_transmit_byte(0xBE);
 21a:	8e eb       	ldi	r24, 0xBE	; 190
 21c:	0e 94 b4 00 	call	0x168	; 0x168 <one_wire_transmit_byte>
	temp = one_wire_receive_byte();
 220:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <one_wire_receive_byte>
 224:	18 2f       	mov	r17, r24
	temp = temp >> 1 ;
	temp_sign = one_wire_receive_byte();
 226:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <one_wire_receive_byte>
	sign =  temp_sign;
	sign = sign <<  8;
	sign = sign & 0xFF00;
	return  (sign | temp);
 22a:	16 95       	lsr	r17
 22c:	41 2f       	mov	r20, r17
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	38 2f       	mov	r19, r24
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	42 2b       	or	r20, r18
 236:	53 2b       	or	r21, r19
 238:	02 c0       	rjmp	.+4      	; 0x23e <return_temp+0x50>
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	50 e8       	ldi	r21, 0x80	; 128
	
		
}
 23e:	ca 01       	movw	r24, r20
 240:	1f 91       	pop	r17
 242:	08 95       	ret

00000244 <no_device>:
void no_device(){
	lcd_command(0x02);
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_command>
	lcd_data('N');
 24a:	8e e4       	ldi	r24, 0x4E	; 78
 24c:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	lcd_data('O');
 250:	8f e4       	ldi	r24, 0x4F	; 79
 252:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	lcd_data(' ');
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	lcd_data('D');
 25c:	84 e4       	ldi	r24, 0x44	; 68
 25e:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	lcd_data('E');
 262:	85 e4       	ldi	r24, 0x45	; 69
 264:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	lcd_data('V');
 268:	86 e5       	ldi	r24, 0x56	; 86
 26a:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	lcd_data('I');
 26e:	89 e4       	ldi	r24, 0x49	; 73
 270:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
    lcd_data('C');
 274:	83 e4       	ldi	r24, 0x43	; 67
 276:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	lcd_data('E');
 27a:	85 e4       	ldi	r24, 0x45	; 69
 27c:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	return;
}
 280:	08 95       	ret

00000282 <print_temp>:
void print_temp(unsigned char hun,unsigned char dec,unsigned char mon,unsigned char sign){
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	08 2f       	mov	r16, r24
 290:	f6 2e       	mov	r15, r22
 292:	e4 2e       	mov	r14, r20
 294:	12 2f       	mov	r17, r18
	lcd_command(0x02);
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_command>
	lcd_data(sign);
 29c:	81 2f       	mov	r24, r17
 29e:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	if(hun>0){
 2a2:	00 23       	and	r16, r16
 2a4:	21 f0       	breq	.+8      	; 0x2ae <print_temp+0x2c>
	lcd_data(hun+0x30);
 2a6:	80 2f       	mov	r24, r16
 2a8:	80 5d       	subi	r24, 0xD0	; 208
 2aa:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	}
	lcd_data(dec+0x30);
 2ae:	8f 2d       	mov	r24, r15
 2b0:	80 5d       	subi	r24, 0xD0	; 208
 2b2:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	lcd_data(mon+0x30);
 2b6:	8e 2d       	mov	r24, r14
 2b8:	80 5d       	subi	r24, 0xD0	; 208
 2ba:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	lcd_data(0xb2);
 2be:	82 eb       	ldi	r24, 0xB2	; 178
 2c0:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	lcd_data('C');
 2c4:	83 e4       	ldi	r24, 0x43	; 67
 2c6:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0; i<4; i++){
	lcd_data(' ');
 2ce:	80 e2       	ldi	r24, 0x20	; 32
 2d0:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	}
	lcd_data(dec+0x30);
	lcd_data(mon+0x30);
	lcd_data(0xb2);
	lcd_data('C');
	for(int i=0; i<4; i++){
 2d4:	21 96       	adiw	r28, 0x01	; 1
 2d6:	c4 30       	cpi	r28, 0x04	; 4
 2d8:	d1 05       	cpc	r29, r1
 2da:	c9 f7       	brne	.-14     	; 0x2ce <print_temp+0x4c>
	lcd_data(' ');
	}
	return;
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	08 95       	ret

000002ea <get_digits>:
void get_digits(char number){
 2ea:	38 2f       	mov	r19, r24
	if(number>=100){
 2ec:	84 36       	cpi	r24, 0x64	; 100
 2ee:	30 f0       	brcs	.+12     	; 0x2fc <get_digits+0x12>
		hun++;
 2f0:	80 91 61 00 	lds	r24, 0x0061
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 61 00 	sts	0x0061, r24
		number = number -100;
 2fa:	34 56       	subi	r19, 0x64	; 100
 2fc:	20 91 63 00 	lds	r18, 0x0063
 300:	83 2f       	mov	r24, r19
 302:	6a e0       	ldi	r22, 0x0A	; 10
 304:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodqi4>
 308:	28 0f       	add	r18, r24
 30a:	20 93 63 00 	sts	0x0063, r18
	}
	while(number >=10){
		dec++;
		number = number -10;
	}
	mon = number;
 30e:	83 2f       	mov	r24, r19
 310:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodqi4>
 314:	90 93 62 00 	sts	0x0062, r25
	return;
}
 318:	08 95       	ret

0000031a <main>:
int main(void)
{   int temp;
 31a:	1f 93       	push	r17
	unsigned char sign,magnitude,sign_ext;
    DDRD = 0xFF;
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	81 bb       	out	0x11, r24	; 17
	lcd_init();
 320:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_init>
    while (1) 
    {	hun=0;
 324:	10 92 61 00 	sts	0x0061, r1
		mon=0;
 328:	10 92 62 00 	sts	0x0062, r1
		dec=0;
 32c:	10 92 63 00 	sts	0x0063, r1
		sign = '+';
		temp = return_temp();
 330:	0e 94 f7 00 	call	0x1ee	; 0x1ee <return_temp>
 334:	9c 01       	movw	r18, r24
		if(temp == 0x8000){
 336:	80 e8       	ldi	r24, 0x80	; 128
 338:	20 30       	cpi	r18, 0x00	; 0
 33a:	38 07       	cpc	r19, r24
 33c:	19 f4       	brne	.+6      	; 0x344 <main+0x2a>
			no_device();
 33e:	0e 94 22 01 	call	0x244	; 0x244 <no_device>
 342:	f0 cf       	rjmp	.-32     	; 0x324 <main+0xa>
		}
		else{
		   sign_ext  = (temp >> 8) & 0x00FF;
		   if(sign_ext ==  0xff){
 344:	9f 3f       	cpi	r25, 0xFF	; 255
 346:	11 f4       	brne	.+4      	; 0x34c <main+0x32>
 348:	1d e2       	ldi	r17, 0x2D	; 45
 34a:	01 c0       	rjmp	.+2      	; 0x34e <main+0x34>
 34c:	1b e2       	ldi	r17, 0x2B	; 43
			   sign = '-';
		   }
		   magnitude = temp & 0x00FF;
 34e:	82 2f       	mov	r24, r18
		   if(sign == '-'){
 350:	1d 32       	cpi	r17, 0x2D	; 45
 352:	09 f4       	brne	.+2      	; 0x356 <main+0x3c>
			   magnitude = ~(magnitude);
			   magnitude = magnitude + 1;
 354:	81 95       	neg	r24
			    }
		   get_digits(magnitude);
 356:	0e 94 75 01 	call	0x2ea	; 0x2ea <get_digits>
		   print_temp(hun,dec,mon,sign);   
 35a:	80 91 61 00 	lds	r24, 0x0061
 35e:	60 91 63 00 	lds	r22, 0x0063
 362:	40 91 62 00 	lds	r20, 0x0062
 366:	21 2f       	mov	r18, r17
 368:	0e 94 41 01 	call	0x282	; 0x282 <print_temp>
 36c:	db cf       	rjmp	.-74     	; 0x324 <main+0xa>

0000036e <__udivmodqi4>:
 36e:	99 1b       	sub	r25, r25
 370:	79 e0       	ldi	r23, 0x09	; 9
 372:	04 c0       	rjmp	.+8      	; 0x37c <__udivmodqi4_ep>

00000374 <__udivmodqi4_loop>:
 374:	99 1f       	adc	r25, r25
 376:	96 17       	cp	r25, r22
 378:	08 f0       	brcs	.+2      	; 0x37c <__udivmodqi4_ep>
 37a:	96 1b       	sub	r25, r22

0000037c <__udivmodqi4_ep>:
 37c:	88 1f       	adc	r24, r24
 37e:	7a 95       	dec	r23
 380:	c9 f7       	brne	.-14     	; 0x374 <__udivmodqi4_loop>
 382:	80 95       	com	r24
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
