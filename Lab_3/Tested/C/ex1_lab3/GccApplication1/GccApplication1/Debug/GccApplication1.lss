
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a1  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000680  00000000  00000000  00000c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041a  00000000  00000000  00001285  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dc  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ab  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001fab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <scan_row>:
#include <util/delay.h>

int _tmp_=0x0000;
int scan_row(char row_nr)
{
	char row = 0x08 << row_nr;
  7c:	28 e0       	ldi	r18, 0x08	; 8
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <scan_row+0xa>
  82:	22 0f       	add	r18, r18
  84:	33 1f       	adc	r19, r19
  86:	8a 95       	dec	r24
  88:	e2 f7       	brpl	.-8      	; 0x82 <scan_row+0x6>
	PORTC = row;
  8a:	25 bb       	out	0x15, r18	; 21
	asm volatile ("nop");
  8c:	00 00       	nop
	asm volatile ("nop");
  8e:	00 00       	nop
	return (PINC & 0x0f);
  90:	83 b3       	in	r24, 0x13	; 19
  92:	8f 70       	andi	r24, 0x0F	; 15
}
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret

00000098 <scan_keypad>:

int scan_keypad()
{
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
	int temp = scan_row(4) | (scan_row(3)<<4) | (scan_row(2)<<8) | (scan_row(1)<<12);
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
  a6:	ec 01       	movw	r28, r24
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
  ae:	8c 01       	movw	r16, r24
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
  b6:	02 95       	swap	r16
  b8:	12 95       	swap	r17
  ba:	10 7f       	andi	r17, 0xF0	; 240
  bc:	10 27       	eor	r17, r16
  be:	00 7f       	andi	r16, 0xF0	; 240
  c0:	10 27       	eor	r17, r16
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	38 2f       	mov	r19, r24
  c8:	20 2b       	or	r18, r16
  ca:	31 2b       	or	r19, r17
  cc:	c2 2b       	or	r28, r18
  ce:	d3 2b       	or	r29, r19
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
	return temp;
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	38 2f       	mov	r19, r24
  dc:	32 95       	swap	r19
  de:	30 7f       	andi	r19, 0xF0	; 240
}
  e0:	c9 01       	movw	r24, r18
  e2:	8c 2b       	or	r24, r28
  e4:	9d 2b       	or	r25, r29
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	08 95       	ret

000000f0 <scan_keypad_rising_edge>:

int scan_keypad_rising_edge()
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
	int first_scan = scan_keypad();
  f4:	0e 94 4c 00 	call	0x98	; 0x98 <scan_keypad>
  f8:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f e7       	ldi	r18, 0x7F	; 127
  fc:	88 e3       	ldi	r24, 0x38	; 56
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <scan_keypad_rising_edge+0x10>
 108:	00 c0       	rjmp	.+0      	; 0x10a <scan_keypad_rising_edge+0x1a>
 10a:	00 00       	nop
	_delay_ms(50);
	
	int second_scan = scan_keypad();
 10c:	0e 94 4c 00 	call	0x98	; 0x98 <scan_keypad>
	
	int next_tmp_state = first_scan & second_scan;
 110:	8c 23       	and	r24, r28
 112:	9d 23       	and	r25, r29
	
	int final_result = next_tmp_state & ~(_tmp_);
 114:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 118:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
 11c:	20 95       	com	r18
 11e:	30 95       	com	r19
	
	_tmp_=next_tmp_state;
 120:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>

	return final_result;	
}
 128:	82 23       	and	r24, r18
 12a:	93 23       	and	r25, r19
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <keypad_to_ascii>:

char keypad_to_ascii(int keypad)
{
	if((keypad&0x0001)==0x0001) return '*';
 132:	80 fd       	sbrc	r24, 0
 134:	20 c0       	rjmp	.+64     	; 0x176 <keypad_to_ascii+0x44>
	if((keypad&0x0002)==0x0002) return '0';
 136:	81 fd       	sbrc	r24, 1
 138:	20 c0       	rjmp	.+64     	; 0x17a <keypad_to_ascii+0x48>
	if((keypad&0x0004)==0x0004) return '#';
 13a:	82 fd       	sbrc	r24, 2
 13c:	20 c0       	rjmp	.+64     	; 0x17e <keypad_to_ascii+0x4c>
	if((keypad&0x0008)==0x0008) return 'D';
 13e:	83 fd       	sbrc	r24, 3
 140:	20 c0       	rjmp	.+64     	; 0x182 <keypad_to_ascii+0x50>
	if((keypad&0x0010)==0x0010) return '7';
 142:	84 fd       	sbrc	r24, 4
 144:	20 c0       	rjmp	.+64     	; 0x186 <keypad_to_ascii+0x54>
	if((keypad&0x0020)==0x0020) return '8';
 146:	85 fd       	sbrc	r24, 5
 148:	20 c0       	rjmp	.+64     	; 0x18a <keypad_to_ascii+0x58>
	if((keypad&0x0040)==0x0040) return '9';
 14a:	86 fd       	sbrc	r24, 6
 14c:	20 c0       	rjmp	.+64     	; 0x18e <keypad_to_ascii+0x5c>
	if((keypad&0x0080)==0x0080) return 'C';
 14e:	87 fd       	sbrc	r24, 7
 150:	20 c0       	rjmp	.+64     	; 0x192 <keypad_to_ascii+0x60>
	if((keypad&0x0100)==0x0100) return '4';
 152:	90 fd       	sbrc	r25, 0
 154:	20 c0       	rjmp	.+64     	; 0x196 <keypad_to_ascii+0x64>
	if((keypad&0x0200)==0x0200) return '5';
 156:	91 fd       	sbrc	r25, 1
 158:	20 c0       	rjmp	.+64     	; 0x19a <keypad_to_ascii+0x68>
	if((keypad&0x0400)==0x0400) return '6';
 15a:	92 fd       	sbrc	r25, 2
 15c:	20 c0       	rjmp	.+64     	; 0x19e <keypad_to_ascii+0x6c>
	if((keypad&0x0800)==0x0800) return 'B';
 15e:	93 fd       	sbrc	r25, 3
 160:	20 c0       	rjmp	.+64     	; 0x1a2 <keypad_to_ascii+0x70>
	if((keypad&0x1000)==0x1000) return '1';
 162:	94 fd       	sbrc	r25, 4
 164:	20 c0       	rjmp	.+64     	; 0x1a6 <keypad_to_ascii+0x74>
	if((keypad&0x2000)==0x2000) return '2';
 166:	95 fd       	sbrc	r25, 5
 168:	20 c0       	rjmp	.+64     	; 0x1aa <keypad_to_ascii+0x78>
	if((keypad&0x4000)==0x4000) return '3';
 16a:	96 fd       	sbrc	r25, 6
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <keypad_to_ascii+0x7c>
	if((keypad&0x8000)==0x8000) return 'A';
 16e:	99 23       	and	r25, r25
 170:	04 f1       	brlt	.+64     	; 0x1b2 <keypad_to_ascii+0x80>
	return 0x00;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
	return final_result;	
}

char keypad_to_ascii(int keypad)
{
	if((keypad&0x0001)==0x0001) return '*';
 176:	8a e2       	ldi	r24, 0x2A	; 42
 178:	08 95       	ret
	if((keypad&0x0002)==0x0002) return '0';
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	08 95       	ret
	if((keypad&0x0004)==0x0004) return '#';
 17e:	83 e2       	ldi	r24, 0x23	; 35
 180:	08 95       	ret
	if((keypad&0x0008)==0x0008) return 'D';
 182:	84 e4       	ldi	r24, 0x44	; 68
 184:	08 95       	ret
	if((keypad&0x0010)==0x0010) return '7';
 186:	87 e3       	ldi	r24, 0x37	; 55
 188:	08 95       	ret
	if((keypad&0x0020)==0x0020) return '8';
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	08 95       	ret
	if((keypad&0x0040)==0x0040) return '9';
 18e:	89 e3       	ldi	r24, 0x39	; 57
 190:	08 95       	ret
	if((keypad&0x0080)==0x0080) return 'C';
 192:	83 e4       	ldi	r24, 0x43	; 67
 194:	08 95       	ret
	if((keypad&0x0100)==0x0100) return '4';
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	08 95       	ret
	if((keypad&0x0200)==0x0200) return '5';
 19a:	85 e3       	ldi	r24, 0x35	; 53
 19c:	08 95       	ret
	if((keypad&0x0400)==0x0400) return '6';
 19e:	86 e3       	ldi	r24, 0x36	; 54
 1a0:	08 95       	ret
	if((keypad&0x0800)==0x0800) return 'B';
 1a2:	82 e4       	ldi	r24, 0x42	; 66
 1a4:	08 95       	ret
	if((keypad&0x1000)==0x1000) return '1';
 1a6:	81 e3       	ldi	r24, 0x31	; 49
 1a8:	08 95       	ret
	if((keypad&0x2000)==0x2000) return '2';
 1aa:	82 e3       	ldi	r24, 0x32	; 50
 1ac:	08 95       	ret
	if((keypad&0x4000)==0x4000) return '3';
 1ae:	83 e3       	ldi	r24, 0x33	; 51
 1b0:	08 95       	ret
	if((keypad&0x8000)==0x8000) return 'A';
 1b2:	81 e4       	ldi	r24, 0x41	; 65
	return 0x00;
	
}
 1b4:	08 95       	ret

000001b6 <main>:

int main(void){
	unsigned int  first_key , second_key;

	DDRB = 0xFF;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xF0;
 1ba:	80 ef       	ldi	r24, 0xF0	; 240
 1bc:	84 bb       	out	0x14, r24	; 20
			_delay_ms(4000);
			PORTB = 0X00;
		}
		else{
			for(int i=0;i<8;i++){
				PORTB =0XFF;
 1be:	1f ef       	ldi	r17, 0xFF	; 255
	unsigned int  first_key , second_key;

	DDRB = 0xFF;
	DDRC = 0xF0;
	while(1){
		_tmp_=0x0000;
 1c0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 1c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		while((first_key = keypad_to_ascii(scan_keypad_rising_edge())) == 0x00);
 1c8:	0e 94 78 00 	call	0xf0	; 0xf0 <scan_keypad_rising_edge>
 1cc:	0e 94 99 00 	call	0x132	; 0x132 <keypad_to_ascii>
 1d0:	c8 2f       	mov	r28, r24
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	20 97       	sbiw	r28, 0x00	; 0
 1d6:	c1 f3       	breq	.-16     	; 0x1c8 <main+0x12>
		while((second_key = keypad_to_ascii(scan_keypad_rising_edge())) == 0x00);
 1d8:	0e 94 78 00 	call	0xf0	; 0xf0 <scan_keypad_rising_edge>
 1dc:	0e 94 99 00 	call	0x132	; 0x132 <keypad_to_ascii>
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	c9 f3       	breq	.-14     	; 0x1d8 <main+0x22>
		if(first_key == '0' && second_key=='9'){
 1e6:	e0 97       	sbiw	r28, 0x30	; 48
 1e8:	71 f4       	brne	.+28     	; 0x206 <main+0x50>
 1ea:	c9 97       	sbiw	r24, 0x39	; 57
 1ec:	79 f4       	brne	.+30     	; 0x20c <main+0x56>
			PORTB = 0XFF;
 1ee:	18 bb       	out	0x18, r17	; 24
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	37 ea       	ldi	r19, 0xA7	; 167
 1f4:	41 e6       	ldi	r20, 0x61	; 97
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	30 40       	sbci	r19, 0x00	; 0
 1fa:	40 40       	sbci	r20, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x40>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x4a>
 200:	00 00       	nop
			_delay_ms(4000);
			PORTB = 0X00;
 202:	18 ba       	out	0x18, r1	; 24
 204:	dd cf       	rjmp	.-70     	; 0x1c0 <main+0xa>
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <main+0x5a>
 20c:	88 e0       	ldi	r24, 0x08	; 8
 20e:	90 e0       	ldi	r25, 0x00	; 0
		}
		else{
			for(int i=0;i<8;i++){
				PORTB =0XFF;
 210:	18 bb       	out	0x18, r17	; 24
 212:	2f e7       	ldi	r18, 0x7F	; 127
 214:	3a e1       	ldi	r19, 0x1A	; 26
 216:	46 e0       	ldi	r20, 0x06	; 6
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	30 40       	sbci	r19, 0x00	; 0
 21c:	40 40       	sbci	r20, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x62>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x6c>
 222:	00 00       	nop
				_delay_ms(250);
				PORTB = 0X00;
 224:	18 ba       	out	0x18, r1	; 24
 226:	2f e7       	ldi	r18, 0x7F	; 127
 228:	3a e1       	ldi	r19, 0x1A	; 26
 22a:	46 e0       	ldi	r20, 0x06	; 6
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	30 40       	sbci	r19, 0x00	; 0
 230:	40 40       	sbci	r20, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x76>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x80>
 236:	00 00       	nop
 238:	01 97       	sbiw	r24, 0x01	; 1
			PORTB = 0XFF;
			_delay_ms(4000);
			PORTB = 0X00;
		}
		else{
			for(int i=0;i<8;i++){
 23a:	51 f7       	brne	.-44     	; 0x210 <main+0x5a>
 23c:	c1 cf       	rjmp	.-126    	; 0x1c0 <main+0xa>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
